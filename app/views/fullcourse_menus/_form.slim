#form
  - form.fullcourse_menus.each.with_index do |fullcourse_menu, index|
    = render 'shared/error_messages', model: fullcourse_menu, index: index
    = render 'shared/error_messages', model: form.stores[index], index: index

  .w-100.d-flex.bg-white.rounded-top.mt-3.shadow-lg
    - 8.times do |i|
        div class='btn genre-selecter' v-on:click="changeDisplay('isDisplay#{i}'); changeButton('buttonState#{i}')" v-bind:class="{ buttoncolor: buttonState#{i} }"
          b 
            = FullcourseMenu.genres_i18n.values[i]

  = form_with model: form, url: url, method: method, local: true do |f|
    - form.fullcourse_menus.each.with_index do |fullcourse_menu, index|
      div v-show="isDisplay#{index}"
        .card.rounded-0.rounded-bottom.shadow-lg.p-2.mb-3.border-top
          = f.fields_for :fullcourse_menus, fullcourse_menu do |i|
            .form-group
              h2
                = i.label :name, "#{FullcourseMenu.genres_i18n.values[index]}(前菜)"
              = i.text_field :name, class: 'form-control', placeholder: FullcourseMenu.human_attribute_name(:name)
              = i.hidden_field :genre, value: FullcourseMenu.genres.keys[index]
            .form-group.mt-2
              = i.file_field :menu_image, class: 'form-control', accept: 'image/*', id: "file_btn_#{index}"
              - if current_user.fullcourse_menus.present?
                = link_to '画像を削除', image_destroy_fullcourse_menu_path(id: fullcourse_menu.id, index: index), method: :patch, remote: true, class: 'btn btn-warning', id: "delete_btn_#{index}"
              - else
                = link_to '画像を削除', image_destroy_fullcourse_menu_path(id: 0, index: index), method: :patch, remote: true, class: 'btn btn-warning', id: "delete_btn_#{index}"
              = i.hidden_field :menu_image_cache
              div id="delete_#{index}_image"   
                = image_tag fullcourse_menu.menu_image.url, id: "preview_#{index}", size: '460x345', class: 'img-fluid mb-3'

          = f.fields_for :stores, form.stores[index] do |i|
            .form-group
              = i.label :name
              br
              = i.text_field :name, class: 'form-control', onchange: "codeAddress(#{index})", id: "name_#{index}"
            .form-group
              = i.label :address
              br
              = i.text_field :address, class: 'form-control', onchange: "getLatLng(#{index})", id: "address_#{index}"
              = i.hidden_field :latitude, id: "latitude_#{index}"
              = i.hidden_field :longitude, id: "longitude_#{index}"
              = i.hidden_field :phone_number, id: "phone_number_#{index}"
              div id="map#{index}"

    = f.submit t('defaults.register'), class: 'btn btn-lg btn-primary btn-block'

javascript:
  //住所を入力すると店名と住所から緯度経度、電話番号を取得しフォームに入れる
  function getLatLng(i){
    inputName = document.getElementById(`name_${i}`).value;
    address = document.getElementById(`address_${i}`);
    latitude = document.getElementById(`latitude_${i}`);
    longitude = document.getElementById(`longitude_${i}`);
    phone_number = document.getElementById(`phone_number_${i}`);
    service = new google.maps.places.PlacesService(maps[i]);
    var request = {
      query: `${inputName} ${address.value}`,
      fields: ['formatted_address', 'geometry', 'place_id']
    };
    service.findPlaceFromQuery(request, function(results, status) {
      if (status == 'OK' && address.value) {
        maps[i].setCenter(results[0].geometry.location);
        if (markers[i]) {
          markers[i].setMap(null);
        }
        markers[i] = new google.maps.Marker({
          map: maps[i],
          position: results[0].geometry.location
        });
        address.value = results[0].formatted_address;
        latitude.value = results[0].geometry.location.lat();
        longitude.value = results[0].geometry.location.lng();
        //電話番号取得
        var detailsRequest = {
          placeId: results[0].place_id,
          fields: ['formatted_phone_number']
        };
        service = new google.maps.places.PlacesService(maps[i]);
        service.getDetails(detailsRequest, function(place, status) {
          if (status == 'OK') {
            phone_number.value = place.formatted_phone_number;
          }
        });
        //住所が空欄の時、緯度経度、電話番号のフォームの値を消す
      }else if (!address.value){
        if (markers[i]) {
          markers[i].setMap(null);
        }
        latitude.value = null;
        longitude.value = null;
        phone_number.value = null;
      }
    });
  }

  //店名入力で住所、緯度経度、電話番号を取得し、フォームに入力
  function codeAddress(i){
    inputName = document.getElementById(`name_${i}`).value;
    address = document.getElementById(`address_${i}`);
    latitude = document.getElementById(`latitude_${i}`);
    longitude = document.getElementById(`longitude_${i}`);
    phone_number = document.getElementById(`phone_number_${i}`);
    service = new google.maps.places.PlacesService(maps[i]);
    var request = {
      query: inputName,
      fields: ['formatted_address', 'geometry', 'place_id']
    };
    service.findPlaceFromQuery(request, function(results, status) {
      if (status == 'OK') {
        maps[i].setCenter(results[0].geometry.location);
        if (markers[i]) {
          markers[i].setMap(null);
        }
        markers[i] = new google.maps.Marker({
          map: maps[i],
          position: results[0].geometry.location
        });
        address.value = results[0].formatted_address;
        latitude.value = results[0].geometry.location.lat();
        longitude.value = results[0].geometry.location.lng();
        //電話番号取得
        var detailsRequest = {
          placeId: results[0].place_id,
          fields: ['formatted_phone_number']
        };
        service = new google.maps.places.PlacesService(maps[i]);
        service.getDetails(detailsRequest, function(place, status) {
          if (status == 'OK') {
            phone_number.value = place.formatted_phone_number;
          }
        });
        //店名が空欄の時フォームの全ての値を消す
      } else if (!inputName) {
        if (markers[i]) {
          markers[i].setMap(null);
        }
        address.value = null;
        latitude.value = null;
        longitude.value = null;
        phone_number.value = null;
      }
    });
  }
script async="" defer="defer" src="https://maps.googleapis.com/maps/api/js?key=#{ENV['GOOGLE_API_KEY']}&callback=initMap&libraries=places&v=weekly"
